From 09b35ecdd6aa4baf27e63cbeb60ee3d54bcf5426 Mon Sep 17 00:00:00 2001
From: ankando <i@ity.moe>
Date: Thu, 5 Jun 2025 01:29:53 +0800
Subject: [PATCH 1/3] Update ConstructBlock.java

---
 .../world/blocks/ConstructBlock.java          | 25 +++++++++++++++----
 1 file changed, 20 insertions(+), 5 deletions(-)

diff --git a/core/src/mindustry/world/blocks/ConstructBlock.java b/core/src/mindustry/world/blocks/ConstructBlock.java
index 3e53462cf1c..d09b65f644c 100644
--- a/core/src/mindustry/world/blocks/ConstructBlock.java
+++ b/core/src/mindustry/world/blocks/ConstructBlock.java
@@ -36,6 +36,7 @@ public class ConstructBlock extends Block{
     private static int pitchSeq = 0;
     private static long lastPlayed;
 
+
     public ConstructBlock(int size){
         super("build" + size);
         this.size = size;
@@ -171,6 +172,7 @@ public class ConstructBuild extends Building{
         private @Nullable float[] accumulator;
         private @Nullable float[] totalAccumulator;
         private @Nullable int[] itemsLeft;
+        private @Nullable int[] refundedItems;
 
         @Override
         public String getDisplayName(){
@@ -328,10 +330,11 @@ public void deconstruct(Unit builder, @Nullable CoreBuild core, float amount){
             }
 
             ItemStack[] requirements = current.requirements;
-            if(requirements.length != accumulator.length || totalAccumulator.length != requirements.length){
+            if(accumulator.length != requirements.length || totalAccumulator.length != requirements.length){
                 setDeconstruct(current);
             }
 
+
             //make sure you take into account that you can't deconstruct more than there is deconstructed
             float clampedAmount = Math.min(amount, progress);
 
@@ -349,6 +352,7 @@ public void deconstruct(Unit builder, @Nullable CoreBuild core, float amount){
                         core.items.add(requirements[i].item, accepting);
                         itemsLeft[i] += accepting;
                         accumulator[i] -= accepting;
+                        refundedItems[i] += accepting;
                     }else{
                         accumulator[i] -= accumulated;
                     }
@@ -361,12 +365,20 @@ public void deconstruct(Unit builder, @Nullable CoreBuild core, float amount){
                 //add any leftover items that weren't obtained due to rounding errors
                 if(core != null && !state.rules.infiniteResources){
                     for(int i = 0; i < itemsLeft.length; i++){
-                        int target = Mathf.round(requirements[i].amount * state.rules.buildCostMultiplier * state.rules.deconstructRefundMultiplier);
-                        int remaining = target - itemsLeft[i];
-
+                        int totalCost = Mathf.round(requirements[i].amount * state.rules.buildCostMultiplier);
+                        int used = totalCost - itemsLeft[i] + refundedItems[i];
+                        int target = Mathf.round(used * state.rules.deconstructRefundMultiplier);
+                        int remaining = target - refundedItems[i];
                         if(requirements[i].item.unlockedNowHost()){
-                            core.items.add(requirements[i].item, Mathf.clamp(remaining, 0, core.storageCapacity - core.items.get(requirements[i].item)));
+                            if(remaining >= 0){
+                                core.items.add(requirements[i].item, Mathf.clamp(remaining, 0, core.storageCapacity - core.items.get(requirements[i].item)));
+                            } else {
+                                int toRemove = Math.min(-remaining, core.items.get(requirements[i].item));
+                                core.items.remove(requirements[i].item, toRemove);
+                            }
                         }
+
+                        refundedItems[i] = target;
                         itemsLeft[i] = target;
                     }
                 }
@@ -428,6 +440,7 @@ public void setConstruct(Block previous, Block block){
             this.previous = previous;
             this.buildCost = block.buildTime * state.rules.buildCostMultiplier;
             this.itemsLeft = new int[block.requirements.length];
+            this.refundedItems = new int[block.requirements.length];
             this.accumulator = new float[block.requirements.length];
             this.totalAccumulator = new float[block.requirements.length];
 
@@ -448,8 +461,10 @@ public void setDeconstruct(Block previous){
             this.current = previous;
             this.buildCost = previous.buildTime * state.rules.buildCostMultiplier;
             this.itemsLeft = new int[previous.requirements.length];
+            this.refundedItems = new int[previous.requirements.length];
             this.accumulator = new float[previous.requirements.length];
             this.totalAccumulator = new float[previous.requirements.length];
+
             pathfinder.updateTile(tile);
         }
 

From 1858757572cba07a3f5e0897f99febcc6ffd8b75 Mon Sep 17 00:00:00 2001
From: ankando <i@ity.moe>
Date: Tue, 10 Jun 2025 20:28:39 +0800
Subject: [PATCH 2/3] Update ConstructBlock.java

---
 core/src/mindustry/world/blocks/ConstructBlock.java | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/core/src/mindustry/world/blocks/ConstructBlock.java b/core/src/mindustry/world/blocks/ConstructBlock.java
index d09b65f644c..8c028c7ba94 100644
--- a/core/src/mindustry/world/blocks/ConstructBlock.java
+++ b/core/src/mindustry/world/blocks/ConstructBlock.java
@@ -369,13 +369,9 @@ public void deconstruct(Unit builder, @Nullable CoreBuild core, float amount){
                         int used = totalCost - itemsLeft[i] + refundedItems[i];
                         int target = Mathf.round(used * state.rules.deconstructRefundMultiplier);
                         int remaining = target - refundedItems[i];
+                        Log.err(String.valueOf(remaining));
                         if(requirements[i].item.unlockedNowHost()){
-                            if(remaining >= 0){
-                                core.items.add(requirements[i].item, Mathf.clamp(remaining, 0, core.storageCapacity - core.items.get(requirements[i].item)));
-                            } else {
-                                int toRemove = Math.min(-remaining, core.items.get(requirements[i].item));
-                                core.items.remove(requirements[i].item, toRemove);
-                            }
+                            core.items.add(requirements[i].item, Mathf.clamp(remaining, 0, core.storageCapacity - core.items.get(requirements[i].item)));
                         }
 
                         refundedItems[i] = target;
@@ -488,6 +484,7 @@ public void write(Writes write){
                     write.f(accumulator[i]);
                     write.f(totalAccumulator[i]);
                     write.i(itemsLeft[i]);
+                    write.i(refundedItems[i]);
                 }
             }
         }
@@ -504,11 +501,13 @@ public void read(Reads read, byte revision){
                 accumulator = new float[acsize];
                 totalAccumulator = new float[acsize];
                 itemsLeft = new int[acsize];
+                refundedItems = new int[acsize];
                 for(int i = 0; i < acsize; i++){
                     accumulator[i] = read.f();
                     totalAccumulator[i] = read.f();
                     if(revision >= 1){
                         itemsLeft[i] = read.i();
+                        refundedItems[i] = read.i();
                     }
                 }
             }

From b6c28f0fccac63f3b3217130230c12e69c0f6b8d Mon Sep 17 00:00:00 2001
From: ankando <i@ity.moe>
Date: Tue, 10 Jun 2025 21:08:02 +0800
Subject: [PATCH 3/3] Update ConstructBlock.java

---
 core/src/mindustry/world/blocks/ConstructBlock.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/core/src/mindustry/world/blocks/ConstructBlock.java b/core/src/mindustry/world/blocks/ConstructBlock.java
index 8c028c7ba94..1c085dd42dd 100644
--- a/core/src/mindustry/world/blocks/ConstructBlock.java
+++ b/core/src/mindustry/world/blocks/ConstructBlock.java
@@ -352,6 +352,9 @@ public void deconstruct(Unit builder, @Nullable CoreBuild core, float amount){
                         core.items.add(requirements[i].item, accepting);
                         itemsLeft[i] += accepting;
                         accumulator[i] -= accepting;
+                        if (refundedItems == null) {
+                            refundedItems = new int[requirements.length];
+                        }
                         refundedItems[i] += accepting;
                     }else{
                         accumulator[i] -= accumulated;
@@ -484,7 +487,6 @@ public void write(Writes write){
                     write.f(accumulator[i]);
                     write.f(totalAccumulator[i]);
                     write.i(itemsLeft[i]);
-                    write.i(refundedItems[i]);
                 }
             }
         }
@@ -501,13 +503,11 @@ public void read(Reads read, byte revision){
                 accumulator = new float[acsize];
                 totalAccumulator = new float[acsize];
                 itemsLeft = new int[acsize];
-                refundedItems = new int[acsize];
                 for(int i = 0; i < acsize; i++){
                     accumulator[i] = read.f();
                     totalAccumulator[i] = read.f();
                     if(revision >= 1){
                         itemsLeft[i] = read.i();
-                        refundedItems[i] = read.i();
                     }
                 }
             }
